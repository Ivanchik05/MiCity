import re

import requests
from django.contrib.auth import authenticate, login as auth_login, logout as auth_logout
from .models import ContactMessage
from django.contrib.auth.models import User
from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from .models import Post, LikeDislike
from django.views.decorators.http import require_POST, require_http_methods
import json
import logging
from django.views.decorators.http import require_GET
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync


logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = "7259458746:AAFfT8A01NPfUVpNCSq2TzTBmHcGi3rF3yQ"
TELEGRAM_CHAT_ID = "907423155"


def about(request):
    return render(request, 'html/about.html')


def contact(request):
    return render(request, 'html/contact.html')


# @login_required
def index(request):
    posts = Post.objects.all().order_by('created_at')
    posts_data = []
    for post in posts:
        likes = post.likes_dislikes.filter(is_like=True).count()
        dislikes = post.likes_dislikes.filter(is_like=False).count()
        posts_data.append({
            'post': post,
            'likes': likes,
            'dislikes': dislikes,
        })
    return render(request, 'html/index.html', {'posts_data': posts_data})


def map(request):
    return render(request, 'html/map.html')


def login(request):
    if request.method == "POST":
        username = request.POST.get("username")
        password = request.POST.get("password")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        form_data = {
            'username': username,
        }

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—à–∏–±–æ–∫
        errors = {}

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not username or not username.strip():
            errors['username'] = "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        if not password or len(password) < 8:
            errors['password'] = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤."

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º—É
        if errors:
            print("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–æ–≥–∏–Ω–∞:", errors)  # –û—Ç–ª–∞–¥–∫–∞
            return render(request, 'html/login.html', {
                'errors': errors,
                'form_data': form_data
            })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = authenticate(request, username=username, password=password)

        if user is not None:
            auth_login(request, user)
            return redirect('index')
        else:
            errors['general'] = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
            print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", errors)  # –û—Ç–ª–∞–¥–∫–∞
            return render(request, 'html/login.html', {
                'errors': errors,
                'form_data': form_data
            })

    return render(request, 'html/login.html', {'form_data': {}})


def logout(request):
    auth_logout(request)
    return redirect('login')


def success(request):
    return render(request, 'html/success.html')


def send_message(request):
    if request.method == "POST":
        name = request.POST.get("name")
        email = request.POST.get("email")
        message = request.POST.get("message")

        if not name or not email or not message:
            return render(request, 'html/contact.html', {
                'error': '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            })

        ContactMessage.objects.create(name=name, email=email, message=message)

        text = f"üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞:*\n\nüë§ *–ò–º—è:* {name}\nüìß *Email:* {email}\nüìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* {message}"
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "Markdown"}

        response = requests.post(url, data=payload)

        if response.status_code == 200:
            return redirect('success')
        else:
            return render(request, 'html/contact.html', {
                'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram'
            })

    return redirect('contact')


def register(request):
    if request.method == "POST":
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        first_name = request.POST.get("first_name")
        last_name = request.POST.get("last_name")
        email = request.POST.get("email")
        username = request.POST.get("username")
        password = request.POST.get("password")
        confirm_password = request.POST.get("confirm_password")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        form_data = {
            'first_name': first_name,
            'last_name': last_name,
            'email': email,
            'username': username,
        }

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        errors = {}

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (–¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2-20 —Å–∏–º–≤–æ–ª–æ–≤)
        if not first_name or not re.match(r'^[A-Z–ê-–Ø][a-z–∞-—è]{1,19}$', first_name):
            errors['first_name'] = "–ò–º—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (2-20 —Å–∏–º–≤–æ–ª–æ–≤)."

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–º–∏–ª–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
        if not last_name or not re.match(r'^[A-Z–ê-–Ø][a-z–∞-—è]{1,19}$', last_name):
            errors[
                'last_name'] = "–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (2-20 —Å–∏–º–≤–æ–ª–æ–≤)."

        # –í–∞–ª–∏–¥–∞—Ü–∏—è email (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @)
        if not email or '@' not in email:
            errors['email'] = "Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª '@'."

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 3-20 —Å–∏–º–≤–æ–ª–æ–≤)
        if not username or not re.match(r'^[A-Za-z]{3,20}$', username):
            errors['username'] = "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤."

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è (–Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)
        if not password or len(password) < 8:
            errors['password'] = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤."

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        if password != confirm_password:
            errors['confirm_password'] = "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç."

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
        if User.objects.filter(username=username).exists():
            errors['username_exists'] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º—É —Å –æ—à–∏–±–∫–∞–º–∏
        if errors:
            print("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", errors)  # –û—Ç–ª–∞–¥–∫–∞
            return render(request, 'html/register.html', {
                'errors': errors,
                'form_data': form_data
            })

        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.create_user(
            username=username,
            email=email,
            password=password,
            first_name=first_name,
            last_name=last_name
        )
        user.save()

        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        auth_login(request, user)
        return redirect('index')

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å GET, –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É
    return render(request, 'html/register.html', {'form_data': {}})



# @require_http_methods(["GET", "POST"])
@login_required
@require_POST
def toggle_like_dislike(request):
    try:
        data = json.loads(request.body)
        post_id = data.get('post_id')
        is_like = data.get('is_like')

        if post_id is None or is_like is None:
            return JsonResponse({'status': 'error', 'error': 'Invalid request data'}, status=400)

        post = Post.objects.get(id=post_id)
        user = request.user

        like_dislike, created = LikeDislike.objects.get_or_create(
            post=post,
            user=user,
            defaults={'is_like': is_like}
        )

        if not created:
            if like_dislike.is_like == is_like:
                like_dislike.delete()
            else:
                like_dislike.is_like = is_like
                like_dislike.save()

        likes = LikeDislike.objects.filter(post=post, is_like=True).count()
        dislikes = LikeDislike.objects.filter(post=post, is_like=False).count()

        logger.info(f"Sending WebSocket update for post {post_id}: likes={likes}, dislikes={dislikes}")
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            'posts',
            {
                'type': 'like_dislike_update',
                'update': {
                    'post_id': str(post_id),
                    'likes': likes,
                    'dislikes': dislikes
                }
            }
        )

        return JsonResponse({'status': 'ok', 'likes': likes, 'dislikes': dislikes})
    except Post.DoesNotExist:
        return JsonResponse({'status': 'error', 'error': 'Post not found'}, status=404)
    except Exception as e:
        logger.error(f"Error in toggle_like_dislike: {str(e)}")
        return JsonResponse({'status': 'error', 'error': str(e)}, status=400)